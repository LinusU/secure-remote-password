import { bufferEqual, bufferToHex, hexToBuffer } from "../src/buffer";

describe("bufferEqual", () => {
  const { buffer } = new Uint8Array([
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x62,
    0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20, 0x20, 0x68,
    0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e,
  ]);

  const ref = buffer;
  const slice = buffer.slice(0);

  const { buffer: copy } = new Uint8Array([
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x62,
    0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20, 0x20, 0x68,
    0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e,
  ]);

  const { buffer: smaller } = new Uint8Array([
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x62,
    0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20, 0x20, 0x73,
    0x2e,
  ]);

  const { buffer: sameLengthDifferentContent } = new Uint8Array([
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x62,
    0x6f, 0x64, 0x7c, 0x25, 0x26, 0xf0, 0x9f, 0x92, 0xa9, 0x20, 0x20, 0x68,
    0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e,
  ]);

  test("references are equal", () => {
    expect(bufferEqual(buffer, ref)).toBe(true);
  });

  test("slices are equal", () => {
    expect(bufferEqual(buffer, slice)).toBe(true);
  });

  test("literal copies are equal", () => {
    expect(bufferEqual(buffer, copy)).toBe(true);
  });

  test("differing lengths arent equal", () => {
    expect(bufferEqual(buffer, smaller)).toBe(false);
  });

  test("differing contents arent equal", () => {
    expect(bufferEqual(buffer, sameLengthDifferentContent)).toBe(false);
  });
});

test("bufferToHex", () => {
  const expected = "8c825d0c40d87ffa";
  const { buffer } = new Uint8Array([
    0x8c, 0x82, 0x5d, 0x0c, 0x40, 0xd8, 0x7f, 0xfa,
  ]);
  const hex = bufferToHex(buffer);
  expect(hex).toStrictEqual(expected);
});

test("hexToBuffer", () => {
  const equals = (hex: string, numbers: number[]) => {
    const view = new Uint8Array(numbers.length);

    for (let i = 0; i < view.length; i++) {
      view[i] = numbers[i];
    }

    const { buffer } = view;
    expect(bufferEqual(hexToBuffer(hex), buffer)).toBe(true);
  };

  equals("", []);
  equals("1337", [0x13, 0x37]);
  equals("aabb", [0xaa, 0xbb]);
  equals("AABB", [0xaa, 0xbb]);
  equals(
    "ceae96a325e1dc5dd4f405d905049ceb",
    [
      0xce, 0xae, 0x96, 0xa3, 0x25, 0xe1, 0xdc, 0x5d, 0xd4, 0xf4, 0x05, 0xd9,
      0x05, 0x04, 0x9c, 0xeb,
    ],
  );
  equals(
    "CEAE96A325E1DC5DD4F405D905049CEB",
    [
      0xce, 0xae, 0x96, 0xa3, 0x25, 0xe1, 0xdc, 0x5d, 0xd4, 0xf4, 0x05, 0xd9,
      0x05, 0x04, 0x9c, 0xeb,
    ],
  );
});
