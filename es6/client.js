import * as params from './params';
import SRPInteger from './srp-integer';
export const generateSalt = () => {
    // s    User's salt
    const s = SRPInteger.randomInteger(params.hashOutputBytes);
    return s.toHex();
};
export const derivePrivateKey = (salt, username, password) => {
    // H()  One-way hash function
    const { H } = params;
    // s    User's salt
    // I    Username
    // p    Cleartext Password
    const s = SRPInteger.fromHex(salt);
    const I = String(username);
    const p = String(password);
    // x = H(s, H(I | ':' | p))  (s is chosen randomly)
    const x = H(s, H(SRPInteger.fromHex(`${I}:${p}`)));
    return x.toHex();
};
export const deriveVerifier = (privateKey) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    const { N, g } = params;
    // x    Private key (derived from p and s)
    const x = SRPInteger.fromHex(privateKey);
    // v = g^x                   (computes password verifier)
    const v = g.modPow(x, N);
    return v.toHex();
};
export const generateEphemeral = () => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    const { N, g } = params;
    // A = g^a                  (a = random number)
    const a = SRPInteger.randomInteger(params.hashOutputBytes);
    const A = g.modPow(a, N);
    return {
        secret: a.toHex(),
        public: A.toHex(),
    };
};
export const deriveSession = (clientSecretEphemeral, serverPublicEphemeral, salt, username, privateKey) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    // k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
    // H()  One-way hash function
    const { N, g, k, H } = params;
    // a    Secret ephemeral values
    // B    Public ephemeral values
    // s    User's salt
    // I    Username
    // x    Private key (derived from p and s)
    const a = SRPInteger.fromHex(clientSecretEphemeral);
    const B = SRPInteger.fromHex(serverPublicEphemeral);
    const s = SRPInteger.fromHex(salt);
    const I = String(username);
    const x = SRPInteger.fromHex(privateKey);
    // A = g^a                  (a = random number)
    const A = g.modPow(a, N);
    // B % N > 0
    if (B.mod(N).equals(SRPInteger.ZERO)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('The server sent an invalid public ephemeral');
    }
    // u = H(A, B)
    const u = H(A, B);
    // S = (B - kg^x) ^ (a + ux)
    const S = B.subtract(k.multiply(g.modPow(x, N))).modPow(a.add(u.multiply(x)), N);
    // K = H(S)
    const K = H(S);
    // M = H(H(N) xor H(g), H(I), s, A, B, K)
    const M = H(H(N).xor(H(g)), H(SRPInteger.fromHex(I)), s, A, B, K);
    return {
        key: K.toHex(),
        proof: M.toHex(),
    };
};
export const verifySession = (clientPublicEphemeral, clientSession, serverSessionProof) => {
    // H()  One-way hash function
    const { H } = params;
    // A    Public ephemeral values
    // M    Proof of K
    // K    Shared, strong session key
    const A = SRPInteger.fromHex(clientPublicEphemeral);
    const M = SRPInteger.fromHex(clientSession.proof);
    const K = SRPInteger.fromHex(clientSession.key);
    // H(A, M, K)
    const expected = H(A, M, K);
    const actual = SRPInteger.fromHex(serverSessionProof);
    if (!actual.equals(expected)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('Server provided session proof is invalid');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUNsQyxPQUFPLFVBQVUsTUFBTSxlQUFlLENBQUE7QUFFdEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtJQUNoQyxtQkFBbUI7SUFDbkIsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFMUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDL0IsSUFBWSxFQUNaLFFBQWdCLEVBQ2hCLFFBQWdCLEVBQ2YsRUFBRTtJQUNILDZCQUE2QjtJQUM3QixNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFBO0lBRXBCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsMEJBQTBCO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUUxQixtREFBbUQ7SUFDbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVsRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxVQUFrQixFQUFFLEVBQUU7SUFDcEQsdURBQXVE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