import * as params from './params';
import SRPInteger from './srp-integer';
export const generateSalt = () => {
    // s    User's salt
    const s = SRPInteger.randomInteger(params.hashOutputBytes);
    return s.toHex();
};
export const derivePrivateKey = (salt, username, password) => {
    // H()  One-way hash function
    const { H } = params;
    // s    User's salt
    // I    Username
    // p    Cleartext Password
    const s = SRPInteger.fromHex(salt);
    const I = String(username);
    const p = String(password);
    // x = H(s, H(I | p))  (s is chosen randomly)
    /** Editor's note
     * Error happening here on SRPInteger.fromHex: 'Expected string to be an even number of characters' when calling hexToArrayBuffer
     */
    const x = H(s, H(SRPInteger.fromHex(`${I}:${p}`)));
    return x.toHex();
};
export const deriveVerifier = (privateKey) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    const { N, g } = params;
    // x    Private key (derived from p and s)
    const x = SRPInteger.fromHex(privateKey);
    // v = g^x                   (computes password verifier)
    const v = g.modPow(x, N);
    return v.toHex();
};
export const generateEphemeral = () => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    const { N, g } = params;
    // A = g^a                  (a = random number)
    const a = SRPInteger.randomInteger(params.hashOutputBytes);
    const A = g.modPow(a, N);
    return {
        secret: a.toHex(),
        public: A.toHex(),
    };
};
export const deriveSession = (clientSecretEphemeral, serverPublicEphemeral, salt, username, privateKey) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    // k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
    // H()  One-way hash function
    const { N, g, k, H } = params;
    // a    Secret ephemeral values
    // B    Public ephemeral values
    // s    User's salt
    // I    Username
    // x    Private key (derived from p and s)
    const a = SRPInteger.fromHex(clientSecretEphemeral);
    const B = SRPInteger.fromHex(serverPublicEphemeral);
    const s = SRPInteger.fromHex(salt);
    const I = String(username);
    const x = SRPInteger.fromHex(privateKey);
    // A = g^a                  (a = random number)
    const A = g.modPow(a, N);
    // B % N > 0
    if (B.mod(N).equals(SRPInteger.ZERO)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('The server sent an invalid public ephemeral');
    }
    // u = H(A, B)
    const u = H(A, B);
    // S = (B - kg^x) ^ (a + ux)
    const S = B.subtract(k.multiply(g.modPow(x, N))).modPow(a.add(u.multiply(x)), N);
    // K = H(S)
    const K = H(S);
    // M = H(H(N) xor H(g), H(I), s, A, B, K)
    const M = H(H(N).xor(H(g)), H(SRPInteger.fromHex(I)), s, A, B, K);
    return {
        key: K.toHex(),
        proof: M.toHex(),
    };
};
export const verifySession = (clientPublicEphemeral, clientSession, serverSessionProof) => {
    // H()  One-way hash function
    const { H } = params;
    // A    Public ephemeral values
    // M    Proof of K
    // K    Shared, strong session key
    const A = SRPInteger.fromHex(clientPublicEphemeral);
    const M = SRPInteger.fromHex(clientSession.proof);
    const K = SRPInteger.fromHex(clientSession.key);
    // H(A, M, K)
    const expected = H(A, M, K);
    const actual = SRPInteger.fromHex(serverSessionProof);
    if (!actual.equals(expected)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('Server provided session proof is invalid');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUNsQyxPQUFPLFVBQVUsTUFBTSxlQUFlLENBQUE7QUFFdEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtJQUNoQyxtQkFBbUI7SUFDbkIsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFMUQsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDL0IsSUFBWSxFQUNaLFFBQWdCLEVBQ2hCLFFBQWdCLEVBQ2YsRUFBRTtJQUNILDZCQUE2QjtJQUM3QixNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFBO0lBRXBCLG1CQUFtQjtJQUNuQixnQkFBZ0I7SUFDaEIsMEJBQTBCO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzFCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUUxQiw2Q0FBNkM7SUFDN0M7O09BRUc7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWxELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtJ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