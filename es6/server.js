import * as params from './params';
import SRPInteger from './srp-integer';
export const generateEphemeral = (verifier) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    // k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
    const { N, g, k } = params;
    // v    Password verifier
    const v = SRPInteger.fromHex(verifier);
    // B = kv + g^b             (b = random number)
    const b = SRPInteger.randomInteger(params.hashOutputBytes);
    const B = k.multiply(v).add(g.modPow(b, N)).mod(N);
    return {
        secret: b.toHex(),
        public: B.toHex(),
    };
};
export const deriveSession = (serverSecretEphemeral, clientPublicEphemeral, salt, username, verifier, clientSessionProof) => {
    // N    A large safe prime (N = 2q+1, where q is prime)
    // g    A generator modulo N
    // k    Multiplier parameter (k = H(N, g) in SRP-6a, k = 3 for legacy SRP-6)
    // H()  One-way hash function
    const { N, g, k, H } = params;
    // b    Secret ephemeral values
    // A    Public ephemeral values
    // s    User's salt
    // p    Cleartext Password
    // I    Username
    // v    Password verifier
    const b = SRPInteger.fromHex(serverSecretEphemeral);
    const A = SRPInteger.fromHex(clientPublicEphemeral);
    const s = SRPInteger.fromHex(salt);
    const I = String(username);
    const v = SRPInteger.fromHex(verifier);
    // B = kv + g^b             (b = random number)
    const B = k.multiply(v).add(g.modPow(b, N)).mod(N);
    // A % N > 0
    if (A.mod(N).equals(SRPInteger.ZERO)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('The client sent an invalid public ephemeral');
    }
    // u = H(A, B)
    const u = H(A, B);
    // S = (Av^u) ^ b              (computes session key)
    const S = A.multiply(v.modPow(u, N)).modPow(b, N);
    // K = H(S)
    const K = H(S);
    // M = H(H(N) xor H(g), H(I), s, A, B, K)
    const M = H(H(N).xor(H(g)), H(SRPInteger.fromHex(I)), s, A, B, K);
    const expected = M;
    const actual = SRPInteger.fromHex(clientSessionProof);
    if (!actual.equals(expected)) {
        // fixme: .code, .statusCode, etc.
        throw new Error('Client provided session proof is invalid');
    }
    // P = H(A, M, K)
    const P = H(A, M, K);
    return {
        key: K.toHex(),
        proof: P.toHex(),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQTtBQUNsQyxPQUFPLFVBQVUsTUFBTSxlQUFlLENBQUE7QUFFdEMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7SUFDckQsdURBQXVEO0lBQ3ZELDRCQUE0QjtJQUM1Qiw0RUFBNEU7SUFDNUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFBO0lBRTFCLHlCQUF5QjtJQUN6QixNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBRXRDLCtDQUErQztJQUMvQyxNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUMxRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVsRCxPQUFPO1FBQ04sTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDakIsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUU7S0FDakIsQ0FBQTtBQUNGLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUM1QixxQkFBNkIsRUFDN0IscUJBQTZCLEVBQzdCLElBQVksRUFDWixRQUFnQixFQUNoQixRQUFnQixFQUNoQixrQkFBMEIsRUFDaEIsRUFBRTtJQUNaLHVEQUF1RDtJQUN2RCw0QkFBNEI7SUFDNUIsNEVBQTRFO0lBQzVFLDZCQUE2QjtJQUM3QixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFBO0lBRTdCLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0IsbUJBQW1CO0lBQ25CLDBCQUEwQjtJQUMxQixnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUNuRCxNQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUE7SUFDbkQsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNsQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDMUIsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUV0QywrQ0FBK0M7SUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFbEQsWUFBWTtJQUNaLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3JDLGtDQUFrQztRQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUE7S0FDOUQ7SUFFRCxjQUFjO0lBQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVqQixxREFBcUQ7SUFDckQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFakQsV0FBVztJQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUVkLHlDQUF5QztJQUN6QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRWpFLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQTtJQUNsQixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFFckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDN0Isa0NBQWtDO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQTtLQUMzRDtJQUVELGlCQUFpQjtJQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUVwQixPQUFPO1FBQ04sR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDZCxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRTtLQUNoQixDQUFBO0FBQ0YsQ0FBQyxDQUFBIn0=