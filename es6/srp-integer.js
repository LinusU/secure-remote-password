import randomHex from 'crypto-random-hex';
import { BigInteger } from 'jsbn';
const padStart = (str, maxLength, fillString) => str.padStart(maxLength, fillString);
const kBigInteger = Symbol('big-integer');
const kHexLength = Symbol('hex-length');
class SRPInteger {
    constructor(bigInteger, hexLength) {
        this[kBigInteger] = bigInteger;
        this[kHexLength] = hexLength;
    }
    add(val) {
        return new SRPInteger(this[kBigInteger].add(val[kBigInteger]), null);
    }
    equals(val) {
        return this[kBigInteger].equals(val[kBigInteger]);
    }
    multiply(val) {
        return new SRPInteger(this[kBigInteger].multiply(val[kBigInteger]), null);
    }
    modPow(exponent, m) {
        return new SRPInteger(this[kBigInteger].modPow(exponent[kBigInteger], m[kBigInteger]), m[kHexLength]);
    }
    mod(m) {
        return new SRPInteger(this[kBigInteger].mod(m[kBigInteger]), m[kHexLength]);
    }
    subtract(val) {
        return new SRPInteger(this[kBigInteger].subtract(val[kBigInteger]), this[kHexLength]);
    }
    xor(val) {
        return new SRPInteger(this[kBigInteger].xor(val[kBigInteger]), this[kHexLength]);
    }
    inspect() {
        const hex = this[kBigInteger].toString(16);
        return `<SRPInteger ${hex.slice(0, 16)}${hex.length > 16 ? '...' : ''}>`;
    }
    toHex() {
        var _a;
        if (this[kHexLength] === null) {
            throw new Error('This SRPInteger has no specified length');
        }
        return padStart(this[kBigInteger].toString(16), (_a = this[kHexLength]) !== null && _a !== void 0 ? _a : 0, '0');
    }
}
SRPInteger.fromHex = function (input) {
    return new SRPInteger(new BigInteger(input, 16), input.length);
};
SRPInteger.randomInteger = function (bytes) {
    return SRPInteger.fromHex(randomHex(bytes));
};
SRPInteger.ZERO = new SRPInteger(new BigInteger('0'), null);
export default SRPInteger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JwLWludGVnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3JwLWludGVnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxTQUFTLE1BQU0sbUJBQW1CLENBQUE7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUVqQyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQVcsRUFBRSxTQUFpQixFQUFFLFVBQWtCLEVBQUUsRUFBRSxDQUN2RSxHQUFHLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUVwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDekMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBRXZDLE1BQU0sVUFBVTtJQU9mLFlBQVksVUFBc0IsRUFBRSxTQUF3QjtRQUMzRCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFBO1FBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUE7SUFDN0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFlO1FBQ2xCLE9BQU8sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNyRSxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQWU7UUFDckIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFBO0lBQ2xELENBQUM7SUFFRCxRQUFRLENBQUMsR0FBZTtRQUN2QixPQUFPLElBQUksVUFBVSxDQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUM1QyxJQUFJLENBQ0osQ0FBQTtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBb0IsRUFBRSxDQUFhO1FBQ3pDLE9BQU8sSUFBSSxVQUFVLENBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUMvRCxDQUFDLENBQUMsVUFBVSxDQUFDLENBQ2IsQ0FBQTtJQUNGLENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBYTtRQUNoQixPQUFPLElBQUksVUFBVSxDQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUNyQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQ2IsQ0FBQTtJQUNGLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBZTtRQUN2QixPQUFPLElBQUksVUFBVSxDQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQ2hCLENBQUE7SUFDRixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQWU7UUFDbEIsT0FBTyxJQUFJLFVBQVUsQ0FDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsRUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUNoQixDQUFBO0lBQ0YsQ0FBQztJQUVELE9BQU87UUFDTixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRTFDLE9BQU8sZUFBZSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQTtJQUN6RSxDQUFDO0lBRUQsS0FBSzs7UUFDSixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDOUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFBO1NBQzFEO1FBRUQsT0FBTyxRQUFRLENBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFDOUIsTUFBQSxJQUFJLENBQUMsVUFBVSxDQUFDLG1DQUFJLENBQUMsRUFDckIsR0FBRyxDQUNILENBQUE7SUFDRixDQUFDO0NBQ0Q7QUFFRCxVQUFVLENBQUMsT0FBTyxHQUFHLFVBQVUsS0FBYTtJQUMzQyxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDL0QsQ0FBQyxDQUFBO0FBRUQsVUFBVSxDQUFDLGFBQWEsR0FBRyxVQUFVLEtBQWE7SUFDakQsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQzVDLENBQUMsQ0FBQTtBQUVELFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFFM0QsZUFBZSxVQUFVLENBQUEifQ==